import light as lt
import random
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import time

class Environment(object):
	no_tube = 1
	no_bulb = 2
	no_night = 1

	sun = 0
	tot_light = 0
	time=0
	consumption = 0
	plot_counter = 0
	
	tubes={}
	bulbs = {}
	nights = {}
	
	state =[]
	luminosities = []
	consumptions = []

	def __init__(self):
		for i in range(1,1+max(self.no_tube,self.no_bulb,self.no_night)):
			if(i<=self.no_tube):
				self.tubes['tube'+str(i)] = lt.Light(8,130)
			if (i<=self.no_bulb):
				self.bulbs['bulb'+str(i)] = lt.Light(5,80)
			if(i<=self.no_night):
				self.nights['night'+str(i)] = lt.Light(1,10)
	
		
		
		
		#self.fig = plt.figure()
		#self.ax1 = self.fig.add_subplot(1,1,1)

		#initialize graph
		'''plt.ion() #turn on interactive mode 
		self.fig = plt.figure()#initialize a figure or canvas	
		self.ax = self.fig.add_subplot(111) #Add plot on empty canvas
		self.line, = self.ax.plot(self.consumptions, 'y-') #plot consumptions on y axis as yellow line'''
		
	
	
	#state = [sun,time(in minutes),tube1_intensity,bulb1_intensity,night1_intensity,bulb2_intensity]
	#ambient light = sunlight + total of intensities of all lights
		
	
	
	def observeState(self):#output sun,tube1_intensity,bulb1_intensity,night1_intensity,bulb2_intensity,time
		if(len(self.state)==0):#execute on first call, otherwise state is generated by agentAct
			self.sun = self.getSunLight()
			if(self.time == 1440):
				self.time = 0
			self.state = [self.sun,self.time]
			
			self.time += 15
			
			for i in range(1,1+max(self.no_tube,self.no_bulb,self.no_night)):
				if(i<=self.no_tube):
					self.state[0]+=self.tubes['tube'+str(i)].get_intensity()[0] #get 0th element that is luminosity from returned list
				if (i<=self.no_bulb):
					self.state[0]+=(self.bulbs['bulb'+str(i)].get_intensity()[0])
				if(i<=self.no_night):
					self.state[0]+=(self.nights['night'+str(i)].get_intensity()[0])
		
			self.state = [self.state[0]/15,self.state[1]/1440]
			
		return np.array(self.state)
		
		
		
	def agentAct(self,action): #output next_state,reward
		action = np.divide(action,127)
		counter = 0
		powers= []
		
		self.state[:] = []
		self.luminosities[:] = []
		
		
		for i in range(1,1+max(self.no_tube,self.no_bulb,self.no_night)):
			if(i<=self.no_tube):
				self.tubes['tube'+str(i)].set_intensity(action[counter])
				self.luminosities.extend(self.tubes['tube'+str(i)].get_intensity()[:1])
				powers.extend(self.tubes['tube'+str(i)].get_intensity()[1:2])
				counter +=1
			if (i<=self.no_bulb):
				self.bulbs['bulb'+str(i)].set_intensity(action[counter])
				self.luminosities.extend(self.bulbs['bulb'+str(i)].get_intensity()[:1])
				powers.extend(self.bulbs['bulb'+str(i)].get_intensity()[1:2])
				counter+=1
			if(i<=self.no_night):
				self.nights['night'+str(i)].set_intensity(counter)
				self.luminosities.extend(self.nights['night'+str(i)].get_intensity()[:1])
				powers.extend(self.nights['night'+str(i)].get_intensity()[1:2])
				counter +=1
		
		required = self.getRequiredLuminosity()#for current value of time
		r = self.getReward(powers,required)
		
		#generating next state
		if(self.time == 1440):
			self.time = 0
		self.sun = self.getSunLight()
		
		self.time += 15
			
		self.state.extend([self.sun,self.time])
		self.state[0]+=np.sum(self.luminosities)
		
		self.dailyPowerConsumption(powers)
		
		self.state = [self.state[0]/15,self.state[1]/1440]
		
		powers[:]= []
		
		return np.array(self.state),r


		
	def getReward(self, powers, required):
		self.tot_light = self.sun + (float)(np.sum(self.luminosities))
		tot_power = np.sum(powers)
		#r = -1.6*(abs(self.tot_light-required)) - (tot_power/(abs(required-self.tot_light+np.sum(self.luminosities))*20))
		r = -.4*((1/15)*abs(self.tot_light-required)) - .6*((1/13)*tot_power/(abs(required-self.tot_light+np.sum(self.luminosities))*10))
		'''		punish deviation from required			punish power consumption'''
		'''		set multiplier as .4*(1/15)				set multiplier as .6*(1/13) and denominator as 10'''
		return r
	
	def getRequiredLuminosity(self):	
		if (self.time<=6*15): 
			return 6
		elif(self.time<=32*15):
			return 1
		elif(self.time<=40*15):
			return 8
		elif(self.time<=64*15):
			return 10
		elif(self.time<=80*15):
			return 8
		elif(self.time<=96*15):
			return 6
	
	def getSunLight(self):#right now randomly generate a sunlight value between 0 to 15 weigh randomness acc to time. 
		
		if(self.time<=24*15):
			return 0
		
		elif (self.time<=37*15): #7:15 am 
			return random.uniform(3.5,5.8)
		
		elif(self.time<=46*15): #11:30 am
			if(random.random()<.2): #cloudy
				return random.uniform(3,6.2)
			elif(random.random()<.35): #extra sunny
				return random.uniform(9,13)
			else:
				return random.uniform(7,11)
		
		elif(self.time<=40*15):#5:30 pm
			if(random.random()<.08): #cloudy
				return random.uniform(3,6.2)
			else:
				return random.uniform(6.5,10.2)
		
		elif(self.time<=76*15): #7 pm
			return random.uniform(3.5,6.2)
		
		else:
			return 0
	
	
	def dailyPowerConsumption(self,powers):#plots daily power consumption vs days
			
		self.plot_counter +=1
		print(self.plot_counter)
		powers = np.asarray(powers)/4.0 #energy in Wh 
		self.consumption += np.sum(powers)
		if(self.time==1440):
			self.consumptions.append(self.consumption)
			self.consumption = 0
		if(self.plot_counter%(3*9600) == 0):
			plt.plot(self.consumptions)
			plt.show()